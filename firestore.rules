rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- HELPERS ----------
    function signedIn() { return request.auth != null; }

    function userHasType(t) {
      return signedIn() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             (
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.user_type == t ||
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.selected_role == t ||
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == t ||
               (t == "admin" && (
                 get(/databases/$(database)/documents/users/$(request.auth.uid)).data.is_admin == true ||
                 get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin == true
               )) ||
               (
                 get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles is list &&
                 get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny([t])
               )
             );
    }

    function isAdmin() {
      return signedIn() && (
        request.auth.token.admin == true ||
        userHasType("admin")
      );
    }

    function isOwner(resource) {
      return signedIn() && resource.data.user_id == request.auth.uid;
    }
    function ownerCreating() {
      return signedIn() && request.resource.data.user_id == request.auth.uid;
    }

    function ownsSchoolId(sid) {
      return signedIn() && (
        (exists(/databases/$(database)/documents/School/$(sid)) &&
         get(/databases/$(database)/documents/School/$(sid)).data.user_id == request.auth.uid) ||
        (exists(/databases/$(database)/documents/schools/$(sid)) &&
         get(/databases/$(database)/documents/schools/$(sid)).data.user_id == request.auth.uid)
      );
    }

    function canAccessReservation(resource) {
      return signedIn() && (
        resource.data.student_id == request.auth.uid ||
        ownsSchoolId(resource.data.school_id)
      );
    }

    function publiclyListable(resource) {
      return resource != null && (
        resource.data.is_visible == true ||
        resource.data.verification_status == "verified" ||
        resource.data.is_verified == true
      );
    }

    // ---------- Registration validators (ULTRA-MINIMAL) ----------
    function hasGuestEventRegistrationFields() {
      return
        (request.resource.data.event_id is string) &&
        (request.resource.data.role is string) &&
        (request.resource.data.contact_name is string) &&
        (request.resource.data.contact_email is string) &&
        (request.resource.data.reservation_code is string) &&
        (!request.resource.data.keys().hasAny(['user_id']));
    }

    function hasAuthedEventRegistrationFields() {
      return
        (request.resource.data.event_id is string) &&
        (request.resource.data.role is string) &&
        (request.resource.data.contact_name is string) &&
        (request.resource.data.contact_email is string) &&
        (request.resource.data.reservation_code is string) &&
        (request.resource.data.user_id is string) &&
        (request.resource.data.user_id == request.auth.uid);
    }

    // Collection-name helper for registrations
    function isRegColl(name) {
      return [
        // generic
        'registration','registrations',
        // event registrations (various casings)
        'EventRegistration','EventRegistrations',
        'event_registration','event_registrations','eventRegistrations',
        // exhibitor registrations
        'ExhibitorRegistration','ExhibitorRegistrations',
        'exhibitor_registration','exhibitor_registrations','exhibitorRegistrations',
        // rsvps
        'StudentRSVP','student_rsvps'
      ].hasAny([name]);
    }

    function isPublicPaypalSetting() {
      return resource.data.provider == "paypal" &&
             (resource.data.active == true ||
              resource.data.enabled == true ||
              resource.data.is_active == true);
    }

    // ── Collections ─────────────────────────────────

    match /AboutPageContent/{docId} { allow read, write: if isAdmin(); }

    match /Agent/{docId} {
      allow read: if publiclyListable(resource) || isOwner(resource) || isAdmin();
      allow create: if ownerCreating();
      allow update, delete: if isAdmin() || isOwner(resource);
    }

    match /AgentPackage/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /Asset/{docId} { allow read: if true; allow write: if false; }

    match /BankSettings/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /BrandSettings/{docId} { allow read, write: if isAdmin(); }

    match /Case/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.student_id == request.auth.uid;
    }

    match /chatSettings/{docId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    match /Contact/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /ContactPageContent/{docId} { allow read, write: if isAdmin(); }

    match /Conversation/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /Event/{docId} { allow read: if true; allow write: if false; }

    match /EventAssignment/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    // Event registrations (root)
    match /EventRegistration/{docId} {
      allow create: if isAdmin() ||
                    hasAuthedEventRegistrationFields() ||
                    hasGuestEventRegistrationFields();
      allow read, update, delete: if (signedIn() && resource.data.user_id == request.auth.uid) || isAdmin();
    }
    match /event_registrations/{docId} {
      allow create: if isAdmin() ||
                    hasAuthedEventRegistrationFields() ||
                    hasGuestEventRegistrationFields();
      allow read, update, delete: if (signedIn() && resource.data.user_id == request.auth.uid) || isAdmin();
    }

    // Event registrations (any depth)
    match /{path=**}/EventRegistration/{docId} {
      allow create: if isAdmin() ||
                    hasAuthedEventRegistrationFields() ||
                    hasGuestEventRegistrationFields();
      allow read, update, delete: if (signedIn() && resource.data.user_id == request.auth.uid) || isAdmin();
    }
    match /{path=**}/event_registrations/{docId} {
      allow create: if isAdmin() ||
                    hasAuthedEventRegistrationFields() ||
                    hasGuestEventRegistrationFields();
      allow read, update, delete: if (signedIn() && resource.data.user_id == request.auth.uid) || isAdmin();
    }

    // Exhibitor registrations
    match /ExhibitorRegistration/{docId} {
      allow create: if isAdmin() ||
                    hasAuthedEventRegistrationFields() ||
                    hasGuestEventRegistrationFields();
      allow read, update, delete: if (signedIn() && resource.data.user_id == request.auth.uid) || isAdmin();
    }
    match /exhibitor_registrations/{docId} {
      allow create: if isAdmin() ||
                    hasAuthedEventRegistrationFields() ||
                    hasGuestEventRegistrationFields();
      allow read, update, delete: if (signedIn() && resource.data.user_id == request.auth.uid) || isAdmin();
    }

    // ✅ UNIVERSAL REGISTRATION CREATE (safe fallback by collection name)
    // If your app writes to, say, ".../registrations" or "EventRegistrations", this ensures the create works.
    // It does NOT open reads/updates; those stay governed by specific rules above.
    match /{path=**}/{coll}/{docId} {
      allow create: if isRegColl(coll) &&
                    (hasAuthedEventRegistrationFields() || hasGuestEventRegistrationFields());
    }

    match /FAQ/{docId} { allow read: if true; allow write: if false; }

    match /FairEvent/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /HomePageContent/{docId} { allow read, write: if isAdmin(); }

    match /Institution/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && (resource.data.user_id == request.auth.uid || isAdmin());
    }

    match /KnowledgeBase/{docId} { allow read: if true; allow write: if false; }

    match /Lead/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /MarketplaceOrder/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.student_id == request.auth.uid;
    }

    match /Message/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /OurTeamPageContent/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /Package/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /Payment/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if (signedIn() && resource.data.user_id == request.auth.uid) || isAdmin();
    }

    match /Post/{docId} {
      allow create: if signedIn();
      allow read: if
        (resource.data.keys().hasAny(['status']) && resource.data.status == "published") ||
        (!resource.data.keys().hasAny(['status'])) ||
        (signedIn() && resource.data.user_id == request.auth.uid) ||
        isAdmin();
      allow update, delete: if (signedIn() && resource.data.user_id == request.auth.uid) || isAdmin();
    }

    match /Program/{docId} { allow read: if true; allow write: if false; }

    match /Registration/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /Reservation/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read: if isAdmin() || canAccessReservation(resource);
      allow update: if isAdmin() || canAccessReservation(resource);
      allow delete: if isAdmin() || (signedIn() && resource.data.student_id == request.auth.uid);
    }

    match /School/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /SchoolProfile/{docId} {
      allow create: if (signedIn() && request.resource.data.user_id == request.auth.uid) || isAdmin();
      allow read: if ((resource != null && isOwner(resource)) || (docId == request.auth.uid)) || isAdmin();
      allow update, delete: if (resource != null && isOwner(resource)) ||
                             (request.resource.data.user_id == request.auth.uid) ||
                             isAdmin();
    }

    match /Service/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    // Student RSVPs
    match /StudentRSVP/{docId} {
      allow create: if isAdmin() ||
                    hasAuthedEventRegistrationFields() ||
                    hasGuestEventRegistrationFields();
      allow read, update, delete: if (signedIn() && resource.data.user_id == request.auth.uid) || isAdmin();
    }

    match /StudentTutorPackage/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /SupportAgent/{docId} {
      allow create: if ownerCreating();
      allow read, update, delete: if isOwner(resource);
    }

    match /SupportTicket/{docId} {
      allow create: if ownerCreating();
      allow read, update, delete: if isOwner(resource);
    }

    match /Tutor/{docId} {
      allow get: if !exists(/databases/$(database)/documents/Tutor/$(docId)) ||
                 publiclyListable(resource) || isOwner(resource) || isAdmin();
      allow read: if publiclyListable(resource) || isOwner(resource) || isAdmin();
      allow create: if ownerCreating();
      allow update, delete: if isAdmin() || isOwner(resource);
    }

    match /TutorPackages/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /TutoringSession/{docId} {
      allow create: if isAdmin() || (signedIn() && request.resource.data.student_id == request.auth.uid);
      allow read, update, delete: if isAdmin() || (signedIn() && (
        resource.data.student_id == request.auth.uid ||
        resource.data.tutor_id   == request.auth.uid
      ));
    }

    match /User/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && (
        docId == request.auth.uid ||
        resource.data.user_id == request.auth.uid ||
        isAdmin()
      );
    }

    match /Vendor/{docId} {
      allow read: if publiclyListable(resource) || isOwner(resource) || isAdmin();
      allow create: if ownerCreating();
      allow update, delete: if isAdmin() || isOwner(resource);
    }

    match /VisaDocument/{docId} {
      allow create: if ownerCreating();
      allow read, update, delete: if isOwner(resource);
    }

    match /visaPackages/{docId} { allow read: if true; allow create, update, delete: if isAdmin(); }
    match /VisaPackages/{docId} { allow read: if true; allow create, update, delete: if isAdmin(); }
    match /visa_packages/{docId} { allow read: if true; allow create, update, delete: if isAdmin(); }
    match /tutor_packages/{docId} { allow read: if true; allow create, update, delete: if isAdmin(); }
    match /student_tutor_packages/{docId} { allow read: if true; allow create, update, delete: if isAdmin(); }

    match /VisaRequest/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.student_id == request.auth.uid;
    }

    match /Wallet/{docId} {
      allow create: if ownerCreating();
      allow read, update, delete: if isOwner(resource);
    }

    match /WalletTransaction/{docId} {
      allow create: if ownerCreating();
      allow read, update, delete: if isOwner(resource);
    }

    match /mail/{docId} {
      allow create: if isAdmin();
      allow read, update, delete: if false;
    }

    match /promotions/{id} {
      allow read: if true;

      function validPromotion() {
        return request.resource.data.keys().hasOnly([
          "title_en","title_vi","subtitle_en","subtitle_vi",
          "description_en","description_vi","image_url",
          "price_label_en","price_label_vi",
          "registration_fee_label_en","registration_fee_label_vi",
          "location_en","location_vi","tags_en","tags_vi",
          "cta_label_en","cta_label_vi","cta_link",
          "start_date","end_date","is_active","priority"
        ]) &&
        request.resource.data.image_url is string &&
        request.resource.data.cta_link is string &&
        request.resource.data.is_active is bool &&
        request.resource.data.priority is number;
      }

      allow create, update, delete: if isAdmin() && validPromotion();
    }

    // ===== ALIASES used by the app =====
    match /home_page_content/{docId} { allow read: if true; allow write: if isAdmin(); }
    match /home_page_contents/{docId} { allow read: if true; allow write: if isAdmin(); }

    match /ourTeam/{docId} { allow read: if true; allow write: if isAdmin(); }

    match /contactPage/{docId} { allow read: if true; allow create, update, delete: if isAdmin(); }
    match /contact_page_content/{docId} { allow read: if true; allow create, update, delete: if isAdmin(); }
    match /contact_page_contents/{docId} { allow read: if true; allow create, update, delete: if isAdmin(); }

    match /contacts/{docId} { allow create: if true; allow read, update, delete: if isAdmin(); }

    match /posts/{docId} {
      allow create: if signedIn();
      allow read: if
        (resource.data.keys().hasAny(['status']) && resource.data.status == "published") ||
        (!resource.data.keys().hasAny(['status'])) ||
        (signedIn() && resource.data.user_id == request.auth.uid) ||
        isAdmin();
      allow update, delete: if (signedIn() && resource.data.user_id == request.auth.uid) || isAdmin();
    }

    match /events/{docId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    match /faqs/{docId}     { allow read: if true; allow write: if false; }
    match /programs/{docId} { allow read: if true; allow write: if false; }

    match /schools/{docId} {
      allow read: if true;
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow update, delete: if (signedIn() && resource.data.user_id == request.auth.uid) || isAdmin();
    }

    match /users/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && (
        docId == request.auth.uid ||
        resource.data.user_id == request.auth.uid ||
        isAdmin()
      );
    }

    match /school_profiles/{uid} {
      allow read: if (signedIn() && uid == request.auth.uid) || isAdmin();
      allow create: if ((signedIn() && uid == request.auth.uid && request.resource.data.user_id == request.auth.uid) || isAdmin());
      allow update, delete: if ((signedIn() && uid == request.auth.uid && resource.data.user_id == request.auth.uid) || isAdmin());
    }

    match /services/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /leads/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /institutions/{docId} {
      allow read: if true;
      allow create: if signedIn();
      allow update, delete: if signedIn() && (resource.data.user_id == request.auth.uid || isAdmin());
    }
    match /Institutions/{docId} { allow read: if true; allow write: if isAdmin(); }
    match /Schools/{docId}      { allow read: if true; allow write: if isAdmin(); }

    match /payments/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if (signedIn() && resource.data.user_id == request.auth.uid) || isAdmin();
    }

    match /reservations/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read: if isAdmin() || canAccessReservation(resource);
      allow update: if isAdmin() || canAccessReservation(resource);
      allow delete: if isAdmin() || (signedIn() && resource.data.student_id == request.auth.uid);
    }

    match /marketplace_orders/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.student_id == request.auth.uid;
    }
    match /marketplaceOrders/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.student_id == request.auth.uid;
    }

    match /tutors/{docId} {
      allow get: if !exists(/databases/$(database)/documents/tutors/$(docId)) ||
                 publiclyListable(resource) || isOwner(resource) || isAdmin();
      allow read: if publiclyListable(resource) || isOwner(resource) || isAdmin();
      allow create: if ownerCreating();
      allow update, delete: if isAdmin() || isOwner(resource);
    }

    match /wallets/{docId} {
      allow create: if ownerCreating();
      allow read, update, delete: if isOwner(resource);
    }
    match /walletTransactions/{docId} {
      allow create: if ownerCreating();
      allow read, update, delete: if isOwner(resource);
    }
    match /wallet_transactions/{docId} {
      allow create: if ownerCreating();
      allow read, update, delete: if isOwner(resource);
    }

    match /cases/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.student_id == request.auth.uid;
    }

    match /agents/{docId} {
      allow read: if publiclyListable(resource) || isOwner(resource) || isAdmin();
      allow create: if ownerCreating();
      allow update, delete: if isAdmin() || isOwner(resource);
    }

    match /agent_messages/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /bank_accounts/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }
    match /bank_settings/{docId} { allow read, create, update, delete: if isAdmin(); }

    match /payment_settings/{docId} { allow read: if true; allow create, update, delete: if isAdmin(); }
    match /paymentSettings/{docId}  { allow read: if true; allow create, update, delete: if isAdmin(); }
    match /PaymentSettings/{docId}  { allow read: if true; allow create, update, delete: if isAdmin(); }
    match /paymentSetting/{docId}   { allow read: if true; allow create, update, delete: if isAdmin(); }
    match /PaymentSetting/{docId}   { allow read: if true; allow create, update, delete: if isAdmin(); }

    match /brandSettings/{docId} { allow read, write: if isAdmin(); }
    match /chat_settings/{docId} { allow read: if true; allow create, update, delete: if isAdmin(); }

    // final catch-all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
