rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- HELPERS ----------
    function signedIn() { return request.auth != null; }

    // Look up /users/{auth.uid} and test for a role/type.
    function userHasType(t) {
      return signedIn() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             (
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.user_type == t ||
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.selected_role == t ||
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == t ||
               (t == "admin" && (
                 get(/databases/$(database)/documents/users/$(request.auth.uid)).data.is_admin == true ||
                 get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin == true
               )) ||
               (
                 get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles is list &&
                 get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny([t])
               )
             );
    }

    // Admin if custom claim is set OR the /users/{uid} profile has admin
    function isAdmin() {
      return signedIn() && (
        request.auth.token.admin == true ||
        userHasType("admin")
      );
    }

    // ---------- Registration field validators ----------

    // Guests: NO user_id field allowed. Validate required fields + types.
    function hasGuestEventRegistrationFields() {
      return
        request.resource.data.keys().hasOnly([
          'event_id','role','contact_name','contact_email','phone',
          'organization_name','guest_country','amount_usd','amount_cad',
          'fx_rate','is_guest_registration','reservation_code','created_at'
        ]) &&
        request.resource.data.event_id is string &&
        request.resource.data.role is string &&
        request.resource.data.contact_name is string &&
        request.resource.data.contact_email is string &&
        request.resource.data.phone is string &&
        request.resource.data.organization_name is string &&
        request.resource.data.guest_country is string &&
        request.resource.data.amount_usd is number &&
        request.resource.data.amount_cad is number &&
        request.resource.data.fx_rate is number &&
        request.resource.data.is_guest_registration == true &&
        request.resource.data.reservation_code is string &&
        request.resource.data.created_at == request.time;
    }

    // Authed users: must include user_id matching auth.uid
    function hasAuthedEventRegistrationFields() {
      return
        request.resource.data.keys().hasOnly([
          'event_id','role','contact_name','contact_email','phone',
          'organization_name','guest_country','amount_usd','amount_cad',
          'fx_rate','is_guest_registration','reservation_code','created_at','user_id'
        ]) &&
        request.resource.data.user_id is string &&
        request.resource.data.user_id == request.auth.uid &&
        request.resource.data.event_id is string &&
        request.resource.data.role is string &&
        request.resource.data.contact_name is string &&
        request.resource.data.contact_email is string &&
        request.resource.data.phone is string &&
        request.resource.data.organization_name is string &&
        request.resource.data.guest_country is string &&
        request.resource.data.amount_usd is number &&
        request.resource.data.amount_cad is number &&
        request.resource.data.fx_rate is number &&
        request.resource.data.is_guest_registration is bool &&
        request.resource.data.reservation_code is string &&
        request.resource.data.created_at == request.time;
    }
    // ---------- END HELPERS ----------

    // ── Collections (your originals retained) ─────────────────────────────────

    match /AboutPageContent/{docId} { allow read, write: if isAdmin(); }

    match /Agent/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /AgentPackage/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /Asset/{docId} { allow read: if true; allow write: if false; }

    match /BankSettings/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /BrandSettings/{docId} { allow read, write: if isAdmin(); }

    match /Case/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.student_id == request.auth.uid;
    }

    match /ChatSettings/{docId} { allow read, write: if isAdmin(); }

    match /Contact/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /ContactPageContent/{docId} { allow read, write: if isAdmin(); }

    match /Conversation/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /Event/{docId} { allow read: if true; allow write: if false; }

    match /EventAssignment/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    // EventRegistration  ✅ allow guests
    match /EventRegistration/{docId} {
      allow create: if isAdmin() ||
                    (signedIn() && hasAuthedEventRegistrationFields()) ||
                    (!signedIn() && hasGuestEventRegistrationFields());
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid || isAdmin();
    }

    // ExhibitorRegistration  ✅ allow guests
    match /ExhibitorRegistration/{docId} {
      allow create: if isAdmin() ||
                    (signedIn() && hasAuthedEventRegistrationFields()) ||
                    (!signedIn() && hasGuestEventRegistrationFields());
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid || isAdmin();
    }

    match /FAQ/{docId} { allow read: if true; allow write: if false; }

    match /FairEvent/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /HomePageContent/{docId} { allow read, write: if isAdmin(); }

    match /Institution/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /KnowledgeBase/{docId} { allow read: if true; allow write: if false; }

    match /Lead/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /MarketplaceOrder/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.student_id == request.auth.uid;
    }

    match /Message/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /OurTeamPageContent/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /Package/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /Payment/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /Post/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /Program/{docId} { allow read: if true; allow write: if false; }

    match /Registration/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /Reservation/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.student_id == request.auth.uid;
    }

    match /School/{docId} { allow read: if true; allow write: if false; }

    match /SchoolProfile/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /Service/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    // StudentRSVP  ✅ allow guests
    match /StudentRSVP/{docId} {
      allow create: if isAdmin() ||
                    (signedIn() && hasAuthedEventRegistrationFields()) ||
                    (!signedIn() && hasGuestEventRegistrationFields());
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid || isAdmin();
    }

    match /StudentTutorPackage/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /SupportAgent/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /SupportTicket/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /Tutor/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /TutorPackage/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /TutoringSession/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.student_id == request.auth.uid;
    }

    match /User/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /Vendor/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /VisaDocument/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /VisaPackage/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /VisaRequest/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.student_id == request.auth.uid;
    }

    match /Wallet/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    match /WalletTransaction/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    // Email queue for Firebase "Trigger Email" extension
    match /mail/{docId} {
      allow create: if isAdmin();
      allow read, update, delete: if false;
    }

    // ========= promotions =========
    match /promotions/{id} {
      allow read: if true;

      function validPromotion() {
        return request.resource.data.keys().hasOnly([
          "title_en","title_vi","subtitle_en","subtitle_vi",
          "description_en","description_vi","image_url",
          "price_label_en","price_label_vi",
          "registration_fee_label_en","registration_fee_label_vi",
          "location_en","location_vi","tags_en","tags_vi",
          "cta_label_en","cta_label_vi","cta_link",
          "start_date","end_date","is_active","priority"
        ]) &&
        request.resource.data.image_url is string &&
        request.resource.data.cta_link is string &&
        request.resource.data.is_active is bool &&
        request.resource.data.priority is number;
      }

      allow create, update, delete: if isAdmin() && validPromotion();
    }

    // ===== ALIASES used by the app (added only) =====

    // homepage content (public read; admin manages)
    match /home_page_content/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /home_page_contents/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // blog posts (public can read published OR docs without a status; authors/admins can manage)
    match /posts/{docId} {
      allow create: if signedIn();
      allow read: if
        (resource.data.keys().hasAny(['status']) && resource.data.status == "published") ||
        (!resource.data.keys().hasAny(['status'])) ||
        (signedIn() && resource.data.user_id == request.auth.uid) ||
        isAdmin();
      allow update, delete: if (signedIn() && resource.data.user_id == request.auth.uid) || isAdmin();
    }

    // common public-read mirrors
    match /events/{docId}   { allow read: if true; allow write: if false; }
    match /faqs/{docId}     { allow read: if true; allow write: if false; }
    match /programs/{docId} { allow read: if true; allow write: if false; }
    match /schools/{docId}  { allow read: if true; allow write: if false; }

    // user/profile mirror (same as /User)
    match /users/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    // school profile mirror (same as /SchoolProfile)
    match /school_profiles/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    // services mirror (same as /Service)
    match /services/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    // leads mirror (same as /Lead)
    match /leads/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    // institutions (public read for homepage merges; writes restricted)
    match /institutions/{docId} {
      allow read: if true;
      allow create: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }
    // read-only aliases sometimes used by code
    match /Institutions/{docId} { allow read: if true; allow write: if false; }
    match /Schools/{docId}      { allow read: if true; allow write: if false; }

    // payments mirror (same as /Payment)
    match /payments/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    // reservations mirror (same as /Reservation; student-scoped)
    match /reservations/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.student_id == request.auth.uid;
    }

    // marketplace orders (two codepaths in repo)
    match /marketplace_orders/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.student_id == request.auth.uid;
    }
    match /marketplaceOrders/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.student_id == request.auth.uid;
    }

    // vendor/tutor/tutoring mirrors
    match /vendors/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }
    match /tutors/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }
    match /tutoring_sessions/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.student_id == request.auth.uid;
    }
    match /tutoringSessions/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.student_id == request.auth.uid;
    }

    // wallets & transactions mirrors
    match /wallets/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }
    match /walletTransactions/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    // cases mirror (same as /Case; student-scoped)
    match /cases/{docId} {
      allow create: if signedIn() && request.resource.data.student_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.student_id == request.auth.uid;
    }

    // agents & agent messages (map to /Agent and /Message patterns)
    match /agents/{docId} {
      allow create: if signedIn() && request.resource.data.user_id == request.auth.uid;
      allow read, update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }
    match /agent_messages/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    // bank accounts (map to /BankSettings)
    match /bank_accounts/{docId} {
      allow create: if signedIn();
      allow read: if signedIn();
      allow update, delete: if signedIn() && resource.data.user_id == request.auth.uid;
    }

    // Final deny-all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
