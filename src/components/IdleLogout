// src/components/IdleLogout.jsx
import React from "react";
import { auth } from "@/firebase";
import { signOut } from "firebase/auth";

const LAST_ACTIVITY_KEY = "greenpass:last-activity";

/**
 * Logs the user out after `idleMs` of no activity.
 * - Tracks activity (mousemove, keydown, scroll, touch, visibilitychange, focus)
 * - Shares activity across tabs via localStorage + 'storage' event
 * - Checks every 60s; logs out if idle period exceeded
 */
export default function IdleLogout({ idleMs = 60 * 60 * 1000, onLogout }) {
  React.useEffect(() => {
    let lastActivity = Date.now();

    const bump = () => {
      lastActivity = Date.now();
      try {
        localStorage.setItem(LAST_ACTIVITY_KEY, String(lastActivity));
      } catch {}
    };

    // Count as “activity”
    const activityEvents = [
      "mousemove",
      "mousedown",
      "keydown",
      "scroll",
      "touchstart",
      "visibilitychange",
      "focus",
    ];
    activityEvents.forEach((evt) =>
      window.addEventListener(evt, bump, { passive: true })
    );

    // Initialize immediately
    bump();

    // Keep tabs in sync
    const onStorage = (e) => {
      if (e.key === LAST_ACTIVITY_KEY && e.newValue) {
        const v = parseInt(e.newValue, 10);
        if (!Number.isNaN(v)) {
          lastActivity = Math.max(lastActivity, v);
        }
      }
    };
    window.addEventListener("storage", onStorage);

    const checkIdle = () => {
      const now = Date.now();
      // also read the latest from storage (in case this tab missed an event)
      let stored = 0;
      try {
        stored = parseInt(localStorage.getItem(LAST_ACTIVITY_KEY) || "0", 10);
      } catch {}
      const effectiveLast = Math.max(lastActivity, stored || 0);

      if (auth.currentUser && now - effectiveLast >= idleMs) {
        if (typeof onLogout === "function") onLogout();
        else signOut(auth);
      }
    };

    // Check every minute
    const interval = setInterval(checkIdle, 60 * 1000);

    // Run one immediate check on mount
    checkIdle();

    return () => {
      activityEvents.forEach((evt) =>
        window.removeEventListener(evt, bump)
      );
      window.removeEventListener("storage", onStorage);
      clearInterval(interval);
    };
  }, [idleMs, onLogout]);

  return null;
}
